circuit alu :
  module alu :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip A : UInt<4>, flip B : UInt<4>, flip op : UInt<3>, Result : UInt<4>, zero : UInt<1>, carry : UInt<1>, overflow : UInt<1>}

    io.Result <= UInt<1>("h0") @[lab3.scala 24:17]
    io.zero <= UInt<1>("h0") @[lab3.scala 25:17]
    io.carry <= UInt<1>("h0") @[lab3.scala 26:17]
    io.overflow <= UInt<1>("h0") @[lab3.scala 27:17]
    node _io_Result_T = add(io.A, io.B) @[lab3.scala 30:27]
    node _io_Result_T_1 = tail(_io_Result_T, 1) @[lab3.scala 30:27]
    node _io_Result_T_2 = sub(io.A, io.B) @[lab3.scala 31:27]
    node _io_Result_T_3 = tail(_io_Result_T_2, 1) @[lab3.scala 31:27]
    node _io_Result_T_4 = not(io.A) @[lab3.scala 32:21]
    node _io_Result_T_5 = and(io.A, io.B) @[lab3.scala 33:27]
    node _io_Result_T_6 = or(io.A, io.B) @[lab3.scala 34:27]
    node _io_Result_T_7 = xor(io.A, io.B) @[lab3.scala 35:27]
    node _io_Result_T_8 = lt(io.A, io.B) @[lab3.scala 36:27]
    node _io_Result_T_9 = eq(io.A, io.B) @[lab3.scala 37:27]
    node _io_Result_T_10 = eq(UInt<1>("h1"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_11 = mux(_io_Result_T_10, _io_Result_T_3, _io_Result_T_1) @[Mux.scala 81:58]
    node _io_Result_T_12 = eq(UInt<2>("h2"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_13 = mux(_io_Result_T_12, _io_Result_T_4, _io_Result_T_11) @[Mux.scala 81:58]
    node _io_Result_T_14 = eq(UInt<2>("h3"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_15 = mux(_io_Result_T_14, _io_Result_T_5, _io_Result_T_13) @[Mux.scala 81:58]
    node _io_Result_T_16 = eq(UInt<3>("h4"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_17 = mux(_io_Result_T_16, _io_Result_T_6, _io_Result_T_15) @[Mux.scala 81:58]
    node _io_Result_T_18 = eq(UInt<3>("h5"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_19 = mux(_io_Result_T_18, _io_Result_T_7, _io_Result_T_17) @[Mux.scala 81:58]
    node _io_Result_T_20 = eq(UInt<3>("h6"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_21 = mux(_io_Result_T_20, _io_Result_T_8, _io_Result_T_19) @[Mux.scala 81:58]
    node _io_Result_T_22 = eq(UInt<3>("h7"), io.op) @[Mux.scala 81:61]
    node _io_Result_T_23 = mux(_io_Result_T_22, _io_Result_T_9, _io_Result_T_21) @[Mux.scala 81:58]
    io.Result <= _io_Result_T_23 @[lab3.scala 29:17]
    node _T = eq(io.Result, UInt<1>("h0")) @[lab3.scala 40:20]
    when _T : @[lab3.scala 40:29]
      io.zero <= UInt<1>("h1") @[lab3.scala 41:17]
    else :
      io.zero <= UInt<1>("h0") @[lab3.scala 43:17]
    node sum = add(io.A, io.B) @[lab3.scala 48:20]
    node _T_1 = eq(io.op, UInt<1>("h0")) @[lab3.scala 54:16]
    when _T_1 : @[lab3.scala 54:30]
      node _io_carry_T = bits(sum, 4, 4) @[lab3.scala 55:27]
      io.carry <= _io_carry_T @[lab3.scala 55:21]
      node _io_overflow_T = bits(io.A, 3, 3) @[lab3.scala 56:29]
      node _io_overflow_T_1 = bits(io.B, 3, 3) @[lab3.scala 56:41]
      node _io_overflow_T_2 = eq(_io_overflow_T, _io_overflow_T_1) @[lab3.scala 56:33]
      node _io_overflow_T_3 = bits(io.Result, 3, 3) @[lab3.scala 56:59]
      node _io_overflow_T_4 = bits(io.A, 3, 3) @[lab3.scala 56:71]
      node _io_overflow_T_5 = neq(_io_overflow_T_3, _io_overflow_T_4) @[lab3.scala 56:63]
      node _io_overflow_T_6 = and(_io_overflow_T_2, _io_overflow_T_5) @[lab3.scala 56:46]
      io.overflow <= _io_overflow_T_6 @[lab3.scala 56:21]
    else :
      node _T_2 = eq(io.op, UInt<1>("h1")) @[lab3.scala 57:22]
      when _T_2 : @[lab3.scala 57:36]
        node _io_carry_T_1 = lt(io.A, io.B) @[lab3.scala 58:29]
        io.carry <= _io_carry_T_1 @[lab3.scala 58:21]
        node _io_overflow_T_7 = bits(io.A, 3, 3) @[lab3.scala 59:29]
        node _io_overflow_T_8 = bits(io.B, 3, 3) @[lab3.scala 59:41]
        node _io_overflow_T_9 = neq(_io_overflow_T_7, _io_overflow_T_8) @[lab3.scala 59:33]
        node _io_overflow_T_10 = bits(io.Result, 3, 3) @[lab3.scala 59:59]
        node _io_overflow_T_11 = bits(io.A, 3, 3) @[lab3.scala 59:71]
        node _io_overflow_T_12 = neq(_io_overflow_T_10, _io_overflow_T_11) @[lab3.scala 59:63]
        node _io_overflow_T_13 = and(_io_overflow_T_9, _io_overflow_T_12) @[lab3.scala 59:46]
        io.overflow <= _io_overflow_T_13 @[lab3.scala 59:21]


